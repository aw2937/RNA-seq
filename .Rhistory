}
IDP[[ID_cleaned]]$data[1:a,2]
count<-0
#seq<-list("euk"=names(euk),"arch"=names(arch),"bac"=names(bac))
all_C_term<-c()
all_N_term<-c()
for (king in seq){
count<-count+1
IDP<-c()
N_term<-c()
C_term<-c()
for (i in king){
#skip MED13
print(i)
if (i == "P38931"){next}
ID_cleaned<-sub("\\_.*", "", i)
i<-align$id[grep(ID_cleaned,align$id)]
a<-str_extract(i,"/.+-")
a<-as.numeric(str_extract(a,"\\d+"))
b<-str_extract(i,"-.+")
b<-str_extract(b,"\\d+")
#replace redundant seq
if (ID_cleaned == "Q11QW7"){ID_cleaned<-"A0A6N4SUP6"}
if (ID_cleaned == "F8ERC7"){ID_cleaned<-"A0A7U4E989"}
if (ID_cleaned == "A0A0C1XUA0"){ID_cleaned<-"A0A846HBK9"}
if (ID_cleaned == "A0A1V4C8L7"){ID_cleaned<-"A0A7D5C018"}
if (ID_cleaned == "K7ISV0"){ID_cleaned<-"A0A7M7G3W4"}
if (ID_cleaned == "J9JZ66"){ID_cleaned<-"A0A8R2A1Y7"}
if (ID_cleaned == "H3DS31"){ID_cleaned<-"A0A8R1Y3H4"}
tryCatch({
IDP[[ID_cleaned]]<-iupred(ID_cleaned,proteinName = ID_cleaned, iupredType = "short")
N_term[[ID_cleaned]]<-IDP[[ID_cleaned]]$data[1:a,2]
C_term[[ID_cleaned]]<-IDP[[ID_cleaned]]$data[b:length(IDP[[ID_cleaned]]$data[,1]),2]
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
max<-max(lengths(N_term))
for (i in 1:length(N_term)){
N_term[[i]]<-append(rep(NA,max-length(N_term[[i]])),N_term[[i]])
}
N_term<-as.data.frame(N_term)
N_term$mean<-rowMeans(N_term,na.rm = TRUE)
N_term<-transform(N_term, SD=apply(N_term,1, sd, na.rm = TRUE))
N_term$residue<-c(-max:-1)
all_N_term[[kingdoms[count]]]<-N_term
max<-max(lengths(C_term))
for (i in 1:length(C_term)){
C_term[[i]]<-append(C_term[[i]],rep(NA,max-length(C_term[[i]])))
}
C_term<-as.data.frame(C_term)
C_term$mean<-rowMeans(C_term,na.rm = TRUE)
C_term<-transform(C_term, SD=apply(C_term,1, sd, na.rm = TRUE))
C_term$residue<-c(1:max)
all_C_term[[kingdoms[count]]]<-C_term
}
N_term
max<-max(lengths(N_term))
max
for (i in 1:length(N_term)){
N_term[[i]]<-append(rep(NA,max-length(N_term[[i]])),N_term[[i]])
}
N_term
N_term<-as.data.frame(N_term)
N_term
N_term$mean<-rowMeans(N_term,na.rm = TRUE)
N_term<-transform(N_term, SD=apply(N_term,1, sd, na.rm = TRUE))
N_term
N_term
all_N_term[[kingdoms[count]]]<-N_term
all_N_term
all_N_term$pAGO
IDP[[ID_cleaned]]<-iupred(ID_cleaned,proteinName = ID_cleaned, iupredType = "short")
IDP[[ID_cleaned]]<-iupred(c("A0A8R2A1Y7","A0A8R1Y3H4"),proteinName = ID_cleaned, iupredType = "short")
View(DF)
setwd("~/OneDrive - University of Cambridge/Argonautes/interaction_network")
read.csv("data/reference_alignment_af2_score_table.csv")
af2<-read.csv("data/reference_alignment_af2_score_table.csv")
af2
View(af2)
rowMeans(af2)
as.numeric(af2)
View(af2)
af2<-read.csv("data/reference_alignment_af2_score_table.csv",row.names = 1)
af2
af2<-read.csv("data/reference_alignment_af2_score_table.csv",row.names = 1)
rowMeans(af2)
as.numeric(af2)
df2 <- mutate_all(df1, function(x) as.numeric(as.character(x)))
df2 <- mutate_all(af2, function(x) as.numeric(as.character(x)))
df2
View(df2)
rowMeans(DF2)
rowMeans(df2)
?rowMean
?rowMeans
rowMeans(df2,na.rm=T)
df2
df2$means<-rowMeans(df2,na.rm=T)
df2$means
tax
#plot plDDT scores from AF2 models
phylo<-read.csv("./data/phylo_all_sequences.csv",row.names = 1)
phylo
IDs<-rownames(phylo[grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
Ids
IDs
df2
phylo[!(sub("^(.*?)_.*$", "\\1", rownames(phylo)) %in% IDs)]
(sub("^(.*?)_.*$", "\\1", rownames(phylo)) %in% IDs)
phylo[!(sub("^(.*?)_.*$", "\\1", rownames(phylo)) %in% IDs),]
df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]
df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means
IDs<-rownames(phylo[grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means
df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means
df2<-data.frame(score=df2$means,ID=rep("eAGO"))
af2<-read.csv("data/reference_alignment_af2_score_table.csv",row.names = 1)
df2 <- mutate_all(af2, function(x) as.numeric(as.character(x)))
df2$means<-rowMeans(df2,na.rm=T)
data.frame(score=df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("eAGO"))
IDs<-rownames(phylo[-grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df3<-data.frame(score=df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("pAGO"))
IDs<-rownames(phylo[grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df3<-data.frame(score=df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("eAGO"))
IDs<-rownames(phylo[grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means
df3<-data.frame(score=df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("eAGO"))
IDs<-rownames(phylo[-grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df4<-data.frame(score=df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("pAGO"))
df<-rbind(df3,df4)
p <- df %>%
mutate(ID = fct_relevel(ID,c("variants","cancer"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
xlab("")+
ylab("mean norm. SAS per residue")+
theme_classic()+
geom_boxplot(width=0.1)
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
xlab("")+
ylab("mean norm. SAS per residue")+
theme_classic()+
geom_boxplot(width=0.1)
p
IDs<-rownames(phylo[grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means
df3<-data.frame(score=df2[(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("eAGO"))
IDs<-rownames(phylo[-grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df4<-data.frame(score=df2[(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("pAGO"))
df3<-data.frame(score=df2$means,ID=rep("eAGO"))
df<-rbind(df3,df4)
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
xlab("")+
ylab("mean norm. SAS per residue")+
theme_classic()+
geom_boxplot(width=0.1)
#coord_flip()
p
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
geom_boxplot(width=0.1)
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
stat_summary(fun = "mean",
geom = "point",
color = "red")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
geom_boxplot(width=0.1)
p
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
stat_summary(fun = "mean",geom = "point",color = "red")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
geom_boxplot(width=0.1)
p
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
stat_summary(fun = "mean",geom = "point",color = "red")
p
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
stat_summary(fun = "mean",geom = "point",color = "red")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()
p
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
stat_summary(fun = "mean",geom = "point",color = "red")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
stat_summary(fun.data = "mean_cl_boot", geom = "crossbar",
colour = "red", width = 0.2)
p
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
stat_summary(fun = "mean",geom = "point",color = "red")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange",
colour = "red")
p
??geom_boxplot
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
#stat_summary(fun = "mean",geom = "point",color = "red")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
geom_boxplot(width=0.1)
p
df3
View(af2)
af2
View(af2)
to_drop
to_drop <- c("2bgg","O28951",
"7kpv","P38931",
"C3ZQ22",
"K7IUR4",
"A0A482VG33",
"A0A3R7GRK9")
to_drop
af2[!(sub("^(.*?)_.*$", "\\1", rownames(af2)) %in% to_drop),]
af2<-af2[!(sub("^(.*?)_.*$", "\\1", rownames(af2)) %in% to_drop),]
df2 <- mutate_all(af2, function(x) as.numeric(as.character(x)))
df2$means<-rowMeans(df2,na.rm=T)
IDs<-rownames(phylo[grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df2[!(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means
df3<-data.frame(score=df2[(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("eAGO"))
IDs<-rownames(phylo[-grep("Eukaryota", phylo$Taxonomic.lineage..ALL.),])
df4<-data.frame(score=df2[(sub("^(.*?)_.*$", "\\1", rownames(df2)) %in% IDs),]$means,ID=rep("pAGO"))
df3<-data.frame(score=df2$means,ID=rep("eAGO"))
df<-rbind(df3,df4)
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
#stat_summary(fun = "mean",geom = "point",color = "red")+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
geom_boxplot(width=0.1)
#coord_flip()
p
View(af2)
df
p <- df %>%
mutate(ID = fct_relevel(ID,c("eAGO","pAGO"))) %>%
ggplot( aes(x=ID, y=score)) +
geom_violin(fill="gray")+
#stat_summary(fun = "mean",geom = "point",color = "red")+
ylim(75, 95)+
xlab("")+
ylab("mean AF2 plDDT score")+
theme_classic()+
geom_boxplot(width=0.1)
p
col_names <- colnames(df2)
col_names
col_names <- sapply(strsplit(col_names, "\\."), function(x) paste(x[1], x[2], sep = "."))
col_names
unique_col_names <- unique(col_names)
#Calculate the average for columns with the same name up to the second dot
averages <- lapply(unique_col_names, function(name) {
cols_to_average <- col_names == name
cols_to_average <- colnames(data)[cols_to_average]
data %>%
select(all_of(cols_to_average)) %>%
summarise(across(everything(), mean, na.rm = TRUE))
})
#Calculate the average for columns with the same name up to the second dot
averages <- lapply(unique_col_names, function(name) {
cols_to_average <- col_names == name
cols_to_average <- colnames(df2)[cols_to_average]
df2 %>%
select(all_of(cols_to_average)) %>%
summarise(across(everything(), mean, na.rm = TRUE))
})
# Combine the calculated averages into a single data frame
averages_df <- do.call(cbind, averages)
averages_df
View(averages_df)
cols_to_average
#Calculate the average for columns with the same name up to the second dot
averages <- lapply(unique_col_names, function(name) {
cols_to_average <- col_names == name
cols_to_average <- colnames(df2)[cols_to_average]
df2 %>%
select(all_of(cols_to_average)) %>%
summarise(across(everything(), mean, na.rm = TRUE))
})
averages
cols_to_average
length(unique_col_names)
unique_col_names
averages
mean(averages)
mean(averages$)
colnames(averages_df) <- unique_col_names
averages_df
View(averages_df)
# Combine the calculated averages into a single data frame
averages_df <- do.call(cbind, averages)
averages_df
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(org.At.tair.db)
library(RColorBrewer)
library(ape)
library(biomaRt)
library(dplyr)
library(ReactomePA)
library(clusterProfiler)
# Set working directory to source file location
setwd("/Volumes/Transcend/p53/RNA_seq")
load("RData/WT_RNAseq.RData")
venn(DEgenes)
dotplot(commonpath,showCategory = 100)
commonpath<-enrichPathway(AZA_DAC_up, organism="human")
#############
# Interactive MD & Volcano HTML plots
glXYPlot(x=fit_contrast$coefficients[,1], y=fit_contrast$lods[,1],
xlab="logFC", ylab="B", main="ctrlVsAZA",
counts=y$counts, group=factor(group, levels = c("cntrl","AZA", "DAC")), status=sum_fit[,1],
side.main="geneID", folder="volcano")
#############
# Interactive MD & Volcano HTML plots
glXYPlot(x=fit_contrast$coefficients[,1], y=fit_contrast$lods[,1],
xlab="logFC", ylab="B", main="ctrlVsAZA",
counts=y$counts, group=factor(group, levels = c("cntrl","AZA", "DAC")), status=sum_fit[,1],
side.main="geneID", folder="volcano")
DE<-topTable(fit_contrast,coef=2,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DEgenes[["DAC_up"]]<-rownames(DE[DE$logFC > 0,])
DEgenes[["DAC_down"]]<-rownames(DE[DE$logFC < 0,])
venn(DEgenes)
#Export
DEgenes<-list()
DE<-topTable(fit_contrast,coef=1,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DEgenes[["AZA_up"]]<-rownames(DE[DE$logFC > 0,])
DEgenes[["AZA_down"]]<-rownames(DE[DE$logFC < 0,])
DE<-topTable(fit_contrast,coef=2,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DEgenes[["DAC_up"]]<-rownames(DE[DE$logFC > 0,])
DEgenes[["DAC_down"]]<-rownames(DE[DE$logFC < 0,])
venn(DEgenes)
pathway <- lapply(DEgenes,enrichPathway,organism="human")
AZA_DAC_up<-intersect(DEgenes$AZA_up,DEgenes$DAC_up)
commonpath<-enrichPathway(AZA_DAC_up, organism="human")
dotplot(commonpath,showCategory = 100)
dotplot(commonpath,showCategory = 10)
AZA_only_up<-outersect(DEgenes$AZA_up,DEgenes$DAC_up)
AZA_only_up<-setdiff(DEgenes$AZA_up,DEgenes$DAC_up)
commonpath<-enrichPathway(AZA_DAC_up, organism="human")
commonpath<-enrichPathway(AZA_only_up, organism="human")
dotplot(commonpath,showCategory = 10)
DAC_only_up<-setdiff(DEgenes$DAC_up,DEgenes$AZA_up)
commonpath<-enrichPathway(DAC_only_up, organism="human")
dotplot(commonpath,showCategory = 10)
DAC_only_up
AZA_only_up
AZA_DAC_up
venn(DEgenes)
#############
# Test against treshold
fit_treat <- treat(fit_contrast,lfc=1) #logFC of 1 = fold change of 2 or 0.5
res_treat <- decideTests(fit_treat)
summary(res_treat)
# Replot after threshold
pdf("images/MD_after_threshold.pdf",8,8)
par(mfrow=c(2,2))
plotMD(fit_contrast,coef=1,status=sum_fit[,"ctrlVsAZA"], values = c(-1,1))
abline(h=0,col="grey")
plotMD(fit_contrast,coef=2,status=sum_fit[,"ctrlVsDAC"], values = c(-1,1))
abline(h=0,col="grey")
plotMD(fit_treat,coef=1,status=res_treat[,"ctrlVsAZA"], values=c(-1,1))
abline(h=0,col="grey")
plotMD(fit_treat,coef=2,status=res_treat[,"ctrlVsDAC"], values=c(-1,1))
abline(h=0,col="grey")
dev.off()
fit_contrast
?treat
# Create contrast matrix and apply to fit object
cont_matrix <- makeContrasts(ctrlVsAZA= AZA-cntrl , ctrlVsDAC= DAC-cntrl,levels=design)
fit_contrast <- contrasts.fit(fit, cont_matrix)
fit_contrast <- eBayes(fit_contrast)
fit_contrast
sum_fit <- decideTests(fit_contrast)
sum_fit
summary(sum_fit)
#############
# Test against treshold
fit_treat <- treat(fit_contrast,lfc=1) #logFC of 1 = fold change of 2 or 0.5
res_treat <- decideTests(fit_treat)
summary(res_treat)
#############
# Test against treshold
fit_treat <- treat(fit_contrast,lfc=0) #logFC of 1 = fold change of 2 or 0.5
res_treat <- decideTests(fit_treat)
summary(res_treat)
#############
# Test against treshold
fit_treat <- treat(fit_contrast,lfc=1) #logFC of 1 = fold change of 2 or 0.5
glMDPlot(fit_treat, coef=1, counts=y$counts, group=factor(group, levels = c("cntrl","AZA", "DAC")),
status=res_treat, side.main="geneID", main="ctrlVsAZA",
folder="AZA")
#############
# Test against treshold
fit_treat <- treat(fit_contrast,lfc=1) #logFC of 1 = fold change of 2 or 0.5
res_treat <- decideTests(fit_treat)
glMDPlot(fit_treat, coef=1, counts=y$counts, group=factor(group, levels = c("cntrl","AZA", "DAC")),
status=res_treat, side.main="geneID", main="ctrlVsAZA",
folder="AZA")
fit_treat
res_treat
View(res_treat)
summary(res_treat)
DE<-topTable(fit.treat,coef=1,sort.by="p")
DE<-topTable(fit_treat,coef=1,sort.by="p")
DE
DE<-topTable(fit_treat,coef=2,sort.by="p")
DE
DE<-topTable(fit_treat,coef=2,sort.by="p",lfc=1,n=Inf)
DE
DE<-topTable(fit_treat,coef=2,sort.by="p",n=Inf)
DE
DE<-topTable(fit_contrast,coef=1,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DE
#############
# Test against treshold
fit_treat <- treat(fit_contrast,lfc=1) #logFC of 1 = fold change of 2 or 0.5
res_treat <- decideTests(fit_treat)
res_treat
fit_treat
DE<-topTable(fit_treat,coef=2,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DE
dim(DE)
DE<-topTable(fit_treat,coef=1,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DE
dim(DE)
#Export
DEgenes<-list()
#DE<-topTable(fit_contrast,coef=1,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DE<-topTable(fit_treat,coef=1,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DEgenes[["AZA_up"]]<-rownames(DE[DE$logFC > 0,])
DEgenes[["AZA_down"]]<-rownames(DE[DE$logFC < 0,])
DE<-topTable(fit_contrast,coef=2,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DEgenes[["DAC_up"]]<-rownames(DE[DE$logFC > 0,])
DEgenes[["DAC_down"]]<-rownames(DE[DE$logFC < 0,])
pathway <- lapply(DEgenes,enrichPathway,organism="human")
pathway<-pathway[lapply(pathway,function(i) length(i$ID))>0]
lapply(seq_along(pathway),function(i) dotplot(pathway[[i]],showCategory = 30,title=paste("Pathway enrichment of ",(names(pathway)[[i]]))))
DEgenes[["DAC_up"]]
#DE<-topTable(fit_contrast,coef=1,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DE<-topTable(fit_treat,coef=1,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DE
dim(DE)
DEgenes[["AZA_up"]]<-rownames(DE[DE$logFC > 0,])
DEgenes[["AZA_up"]]
DEgenes[["AZA_down"]]<-rownames(DE[DE$logFC < 0,])
DEgenes[["AZA_down"]]
DE<-topTable(fit_treat,coef=2,sort.by="p",p.value = 0.05,lfc=1,n=Inf)
DEgenes[["DAC_up"]]<-rownames(DE[DE$logFC > 0,])
DEgenes[["DAC_down"]]<-rownames(DE[DE$logFC < 0,])
pathway <- lapply(DEgenes,enrichPathway,organism="human")
pathway<-pathway[lapply(pathway,function(i) length(i$ID))>0]
lapply(seq_along(pathway),function(i) dotplot(pathway[[i]],showCategory = 30,title=paste("Pathway enrichment of ",(names(pathway)[[i]]))))
DEgenes
pathway
View(pathway$AZA_up)
View(pathway$AZA_up$result)
View(as.data.frame(pathway$AZA_up))
KEGG<-lapply(DEgenes,enrichKEGG,organism="hsa")
KEGG<-KEGG[lapply(KEGG,function(i) length(i$ID))>0]
KEGG
lapply(seq_along(KEGG),function(i) dotplot(KEGG[[i]],showCategory = 10,title=paste("KEGG enrichment of ",(names(KEGG)[[i]]))))
GO<-lapply(DEgenes,enrichGO,OrgDb="org.Hs.eg.db")
GO<-GO[lapply(GO,function(i) length(i$ID))>0]
lapply(seq_along(GO),function(i) dotplot(GO[[i]],showCategory = 10,title=paste("GO enrichment of ",(names(GO)[[i]]))))
View(as.data.frame(AGO$AZA_up))
View(as.data.frame(GO$AZA_up))
